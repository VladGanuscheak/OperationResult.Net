# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build, Test

on:
  push:
    branches:
      - 'main'
      - 'releases/*'
  pull_request:
    branches:
      - 'main'
      - 'releases/*'

jobs:
  setup-dotnet:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get .NET Core Version
        run: dotnet --version > dotnet_version.txt

      - name: Read .NET Core Version from File
        id: dotnet_version
        run: echo "::set-output name=version::$(cat dotnet_version.txt)"

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ steps.dotnet_version.outputs.version }}

  build:
    needs: setup-dotnet
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      SOLUTION_PATH: 'OperationResult.Net/OperationResult.sln'

    steps:
      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: |
            **/obj/
            **/bin/
          key: ${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Restore Dependencies
        run: cd OperationResult.Net && dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build
        run: cd OperationResult.Net && dotnet build ${{ env.SOLUTION_PATH }} --configuration Release

      - name: Run Unit Tests
        run: cd OperationResult.Net && dotnet test ${{ env.SOLUTION_PATH }}
